version: "3.8"

services:
    # Serviços Fundamentais
    rabbitmq:
        image: "rabbitmq:3-management"
        ports:
            - "5672:5672"
            - "15672:15672"
        stop_grace_period: 60s
        healthcheck:
            test: ["CMD", "rabbitmqctl", "status"]
            interval: 60s
            timeout: 30s
            retries: 10
        networks:
            - leads-network

    db:
        image: postgres:13
        environment:
            POSTGRES_DB: leadsdb
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init.sql:/docker-entrypoint-initdb.d/init.sql
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - leads-network

    redis:
        image: redis:alpine
        container_name: redis
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        networks:
            - leads-network

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
            - ES_JAVA_OPTS=-Xms4g -Xmx4g
        ports:
            - "9200:9200"
        volumes:
            - elasticsearch_data:/usr/share/elasticsearch/data
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
            interval: 40s
            timeout: 15s
            retries: 7
        stop_grace_period: 90s
        networks:
            - leads-network

    kibana:
        image: docker.elastic.co/kibana/kibana:7.9.2
        ports:
            - "5601:5601"
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
        depends_on:
            - elasticsearch
        networks:
            - leads-network

    # Serviços de Armazenamento e Processamento de Dados
    datalake:
        build: ./datalake
        restart: always
        environment:
            - ELASTICSEARCH_HOST=elasticsearch
            - RABBITMQ_HOST=rabbitmq
            - RABBITMQ_PORT=5672
            - REDIS_HOST=redis
            - REDIS_PORT=6379
        ports:
            - "8087:8087"
        command: python main.py

        depends_on:
            rabbitmq:
                condition: service_healthy
            elasticsearch:
                condition: service_healthy
        networks:
            - leads-network

    data-processor:
        build: ./data-processor
        ports:
            - "8081:8081"
        environment:
            - PORT=8081
        depends_on:
            - db
        networks:
            - leads-network

    # Serviços de Scraping e Fetching
    scrapper:
        build: ./scrapper
        environment:
            - RABBITMQ_HOST=rabbitmq
            - RABBITMQ_PORT=5672
        depends_on:
            rabbitmq:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://rabbitmq:15672"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - leads-network

    link-fetcher:
        build: ./link-fetcher
        environment:
            - RABBITMQ_HOST=rabbitmq
            - RABBITMQ_PORT=5672
        depends_on:
            rabbitmq:
                condition: service_healthy
        networks:
            - leads-network

    website-fetcher:
        build: ./website-fetcher
        environment:
            - RABBITMQ_HOST=rabbitmq
            - RABBITMQ_PORT=5672
        depends_on:
            rabbitmq:
                condition: service_healthy
        networks:
            - leads-network

    validator-service:
        build: ./validator-service
        ports:
            - "8090:8090"
        environment:
            - PORT=8090
            
            
        networks:
            - leads-network

    # Serviços de API e Inteligência Artificial
    api:
        build: ./api
        ports:
            - "8085:8085"
        environment:
            - RABBITMQ_HOST=rabbitmq
            - RABBITMQ_PORT=5672
            - PORT=8085
        depends_on:
            rabbitmq:
                condition: service_healthy
            db:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://rabbitmq:15672"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - leads-network

    lead-search:
        build: ./lead-search
        ports:
            - "8082:8082"
        environment:
            - RABBITMQ_HOST=rabbitmq
            - RABBITMQ_PORT=5672
        volumes:
            - ./data:/usr/src/app/data
            - /Users/bruno/projects/leads_search/lead-search:/app/lead-search
        depends_on:
            rabbitmq:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://rabbitmq:15672"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - leads-network

    ai:
        build: ./ai_service
        volumes:
            - ./ai:/app/src
        depends_on:
            - db
        command: ["python", "main.py"]
        networks:
            - leads-network

networks:
    leads-network:
        driver: bridge

volumes:
    postgres_data:
    redis_data:
    elasticsearch_data:
